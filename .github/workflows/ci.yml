name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

jobs:
  linux-tests:
    runs-on: ubuntu-latest
    env:
      ARCH_IMAGE: archlinux:base

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            vcpkg-cache/installed
            vcpkg-cache/buildtrees
            vcpkg-cache/packages
          key: vcpkg-linux-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}-2024.07.12
          restore-keys: |
            vcpkg-linux-

      - name: Build + Test (Arch Linux)
        run: |
          mkdir -p vcpkg-cache
          docker run --rm \
            -v "${{ github.workspace }}:/work" \
            -v "${{ github.workspace }}/vcpkg-cache:/vcpkg-cache" \
            -w /work \
            "$ARCH_IMAGE" \
            bash -lc '
              set -euxo pipefail
              pacman -Syu --noconfirm
              # Base toolchain and essentials
              pkgs=(
                git curl python
                base-devel zip unzip tar
                clang cmake ninja pkgconf lld
                glslang shaderc spirv-tools glm
                vulkan-headers vulkan-icd-loader vulkan-validation-layers
                # SDL windowing backends (X11/Wayland) for Linux builds
                libx11 xorgproto libxext libxcb libxkbcommon wayland wayland-protocols
              )
              pacman -S --noconfirm --needed "${pkgs[@]}"

              # Setup vcpkg with caching
              if [ ! -d "/opt/vcpkg" ]; then
                git clone --depth 1 --branch 2024.07.12 https://github.com/microsoft/vcpkg /opt/vcpkg
                /opt/vcpkg/bootstrap-vcpkg.sh -disableMetrics
              fi
              export VCPKG_ROOT=/opt/vcpkg

              # Use cached directories if available
              if [ -d "/vcpkg-cache/installed" ]; then
                cp -r /vcpkg-cache/* /opt/vcpkg/ || true
              fi

              /opt/vcpkg/vcpkg install vulkan-memory-allocator

              # Update cache
              mkdir -p /vcpkg-cache
              cp -r /opt/vcpkg/installed /vcpkg-cache/ || true
              cp -r /opt/vcpkg/buildtrees /vcpkg-cache/ || true
              cp -r /opt/vcpkg/packages /vcpkg-cache/ || true

              # Install uv (Python packaging/runner)
              curl -LsSf https://astral.sh/uv/install.sh | sh
              export PATH="$HOME/.local/bin:$PATH"

              uv --version
              uv run python --version

              export V_LOG_LEVEL=info
              # Debug build + tests
              uv run v.py build
              uv run v.py test
              # Release build + tests
              uv run v.py build --release
              uv run v.py test --release
            '

  windows-tests:
    runs-on: windows-latest
    env:
      V_LOG_LEVEL: info

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build tools
        shell: pwsh
        run: |
          choco install --no-progress -y llvm ninja
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          $llvm64 = Join-Path $env:ProgramFiles 'LLVM\bin'
          if (Test-Path $llvm64) {
            $llvm64 | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          $programFilesX86 = [Environment]::GetFolderPath('ProgramFilesX86')
          if ($programFilesX86) {
            $llvm32 = Join-Path $programFilesX86 'LLVM\bin'
            if (Test-Path $llvm32) {
              $llvm32 | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            }
          }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install arguably

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'
          vcpkgGitCommitId: '2024.07.12'

      - name: Cache vcpkg binaries
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg/installed
            ${{ runner.temp }}/vcpkg/buildtrees
            ${{ runner.temp }}/vcpkg/packages
          key: vcpkg-windows-x64-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}-2024.07.12
          restore-keys: |
            vcpkg-windows-x64-

      - name: Install vcpkg packages
        shell: pwsh
        run: |
          $vcpkgRoot = Join-Path $env:RUNNER_TEMP 'vcpkg'
          "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          & (Join-Path $vcpkgRoot 'vcpkg.exe') install vulkan:x64-windows vulkan-memory-allocator:x64-windows shaderc:x64-windows

      - name: Debug build and tests
        shell: pwsh
        run: |
          python v.py build
          python v.py test

      - name: Release build and tests
        shell: pwsh
        run: |
          python v.py build --release
          python v.py test --release
